package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"quree/config"
	"quree/internal/models"
	"quree/internal/nats"
	"sync"
	"time"

	"gopkg.in/telebot.v3"
)

type User struct {
	ChatID           string     `gorm:"column:chat_id;type:character varying(255);not null;default:NULL" json:"chat_id"`
	QuizCityName     *string    `gorm:"column:quiz_city_name;type:character varying(255)" json:"quiz_city_name"`
	DateQuizFinished *time.Time `gorm:"column:date_quiz_finished;type:timestamp without time zone" json:"date_quiz_finished"`
}

// var textWinner string = "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ \"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å\"...\nChat_bot_assistant_260495\n–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è...\n–°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥! –§–µ—Å—Ç–∏–≤–∞–ª—å \"–î–µ–π—Å—Ç–≤—É–π\" –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. \n\n–ú–æ—è —Å–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞, —á—Ç–æ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –ø–µ—Ä–≤—ã–º —Å–æ–±—Ä–∞–≤—à–∏–º –≤—Å–µ 5 QR-–∫–æ–¥–æ–≤, –∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤—à–∏–º —Å–≤–æ–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Ü–µ–ª–∏–∫–æ–º.\n\n–ü—Ä–∏–º–∏ –º–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–µ–¥—å —Ç—ã —Å—Ç–∞–ª(–∞) —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –ø–æ–¥–∞—Ä–∫–∞üòå\n\n–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –≤ —Ç–≤–æ—ë–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –¥–æ 30 –∞–ø—Ä–µ–ª—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—Å—Ç—É–ø–∏—Ç, –º–æ—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–∏—Ç —Ç–µ–±—è –æ–± —ç—Ç–æ–º, –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ –∑–∞–±—Ä–∞—Ç—å.\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∏ —É–¥–∞—á–∏!"
// var textLoser string = "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ \"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ\"...\nChat_bot_assistant_260495\n–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è...\n–°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥! –§–µ—Å—Ç–∏–≤–∞–ª—å \"–î–µ–π—Å—Ç–≤—É–π\" –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.\n\n–ú–æ—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–æ–¥–∏–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–æ–±—Ä–∞–≤—à–∏—Ö —Å–≤–æ–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –∏–∑ –ø—è—Ç–∏ QR-–∫–æ–¥–æ–≤. \n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç–µ–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º, –Ω–æ —è –æ—á–µ–Ω—å —Ü–µ–Ω—é —Ç–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –§–µ—Å—Ç–∏–≤–∞–ª–µ. –ú–æ—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ—Ç—Å—è —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–∏—Ö –±—É–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –≤ –Æ–≥—Ä–µ!\n\n–Ø –∂–µ–ª–∞—é —Ç–µ–±–µ —É–¥–∞—á–∏, —Ç—ã - –º–æ–ª–æ–¥–µ—Ü!"
var textWinner string = `–ü–û–í–¢–û–†–ù–´–ô –ó–ê–ü–£–°–ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ \"–ü–û–ë–ï–î–ò–¢–ï–õ–¨\"\.
Chat\_bot\_assistant\_260495
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è\.\.\.
–°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞\.

–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥\! –ú—ã –æ–±–µ—â–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\!
–ï—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –∏—â–∏ –∞–¥—Ä–µ—Å –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞ –ø–æ–¥–∞—Ä–∫–æ–º üòå

https://telegra\.ph/FESTIVAL\-DEJSTVUJ\-05\-05

–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∏ —É–¥–∞—á–∏\!

–ê —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∫—É–Ω—É—Ç—å—Å—è –≤¬†–º–∏—Ä –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –∏¬†–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –Ω–µ¬†–∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞¬†—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –ú–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –Æ–≥—Ä—ã:

‚Äî [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk\.com/mcugra)
‚Äî [–¢–µ–ª–µ–≥—Ä–∞–º\-–∫–∞–Ω–∞–ª](https://t\.me/mc\_ugra)`

var ctx = context.Background()
var ncUser *nats.NatsClient = nats.Init(nats.NatsSettings{
	Ctx: ctx,
	URL: config.NATS_URL,
})

// var db = pg.DB

func main() {
	wg := &sync.WaitGroup{}

	ncUser.UsePublishSubject(config.NATS_USER_MESSAGES_SUBJECT)
	winnersFile, err := os.Open("./scripts/send_winners/winners.json")
	if err != nil {
		panic(err)
	}
	winnersBytes, _ := io.ReadAll(winnersFile)
	winners := []User{}

	json.Unmarshal(winnersBytes, &winners)

	fmt.Println(winners[0])

	// create slice of winnerIds
	var winnerIds []string
	for _, winner := range winners {
		winnerIds = append(winnerIds, winner.ChatID)
	}

	winnerIds = append(winnerIds, "306562182")
	winnerIds = append(winnerIds, "222414873")

	messageWinners := &models.SendableMessage{
		Text: &textWinner,
		SendOptions: &telebot.SendOptions{
			ParseMode: "MarkdownV2",
		},
	}

	// losers, err := GetLosers(winnerIds)
	// if err != nil {
	// 	panic(err)
	// }
	// loserIds := []string{}
	// // create slice of loserIds
	// for _, loser := range losers {
	// 	loserIds = append(loserIds, loser.ChatID)
	// }

	// loserIds = append(loserIds, "306562182")

	// messageLosers := &models.SendableMessage{
	// 	Text: &textLoser,
	// }
	wg.Add(2)
	sendAll(&winnerIds, messageWinners, ncUser)
	// sendAll(&loserIds, messageLosers, ncUser)
	wg.Wait()

}

func sendAll(targetChatIDs *[]string, message *models.SendableMessage, nc *nats.NatsClient) {
	var count int = 0

	for _, chatID := range *targetChatIDs {

		count += 1
		if count%30 == 0 {
			time.Sleep(1 * time.Second)
			fmt.Println("Count: ", count, "\n Sleeping...")
		}

		message.Recipient = &models.Recipient{
			ChatID: chatID,
		}
		nc.Publish(message)
	}
	fmt.Println("All sent!")
}

// func GetLosers(winnerIds []string) ([]User, error) {
// 	var users []User
// 	adminChatIds := db.GetAdminChatIDs()

// 	result := db.Model(&dbmodels.User{}).
// 		Select("users.chat_id").
// 		Where("users.chat_id NOT IN (?) AND users.chat_id NOT IN (?)", adminChatIds, winnerIds).
// 		Find(&users)

// 	if result.Error != nil {
// 		return nil, result.Error
// 	}

// 	return users, nil
// }
