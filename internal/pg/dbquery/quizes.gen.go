// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"quree/internal/pg/dbmodels"
)

func newQuiz(db *gorm.DB, opts ...gen.DOOption) quiz {
	_quiz := quiz{}

	_quiz.quizDo.UseDB(db, opts...)
	_quiz.quizDo.UseModel(&dbmodels.Quiz{})

	tableName := _quiz.quizDo.TableName()
	_quiz.ALL = field.NewAsterisk(tableName)
	_quiz.ID = field.NewString(tableName, "id")
	_quiz.Region = field.NewString(tableName, "region")

	_quiz.fillFieldMap()

	return _quiz
}

type quiz struct {
	quizDo

	ALL    field.Asterisk
	ID     field.String
	Region field.String

	fieldMap map[string]field.Expr
}

func (q quiz) Table(newTableName string) *quiz {
	q.quizDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quiz) As(alias string) *quiz {
	q.quizDo.DO = *(q.quizDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quiz) updateTableName(table string) *quiz {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewString(table, "id")
	q.Region = field.NewString(table, "region")

	q.fillFieldMap()

	return q
}

func (q *quiz) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quiz) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["id"] = q.ID
	q.fieldMap["region"] = q.Region
}

func (q quiz) clone(db *gorm.DB) quiz {
	q.quizDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quiz) replaceDB(db *gorm.DB) quiz {
	q.quizDo.ReplaceDB(db)
	return q
}

type quizDo struct{ gen.DO }

type IQuizDo interface {
	gen.SubQuery
	Debug() IQuizDo
	WithContext(ctx context.Context) IQuizDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuizDo
	WriteDB() IQuizDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuizDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuizDo
	Not(conds ...gen.Condition) IQuizDo
	Or(conds ...gen.Condition) IQuizDo
	Select(conds ...field.Expr) IQuizDo
	Where(conds ...gen.Condition) IQuizDo
	Order(conds ...field.Expr) IQuizDo
	Distinct(cols ...field.Expr) IQuizDo
	Omit(cols ...field.Expr) IQuizDo
	Join(table schema.Tabler, on ...field.Expr) IQuizDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuizDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuizDo
	Group(cols ...field.Expr) IQuizDo
	Having(conds ...gen.Condition) IQuizDo
	Limit(limit int) IQuizDo
	Offset(offset int) IQuizDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuizDo
	Unscoped() IQuizDo
	Create(values ...*dbmodels.Quiz) error
	CreateInBatches(values []*dbmodels.Quiz, batchSize int) error
	Save(values ...*dbmodels.Quiz) error
	First() (*dbmodels.Quiz, error)
	Take() (*dbmodels.Quiz, error)
	Last() (*dbmodels.Quiz, error)
	Find() ([]*dbmodels.Quiz, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Quiz, err error)
	FindInBatches(result *[]*dbmodels.Quiz, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbmodels.Quiz) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuizDo
	Assign(attrs ...field.AssignExpr) IQuizDo
	Joins(fields ...field.RelationField) IQuizDo
	Preload(fields ...field.RelationField) IQuizDo
	FirstOrInit() (*dbmodels.Quiz, error)
	FirstOrCreate() (*dbmodels.Quiz, error)
	FindByPage(offset int, limit int) (result []*dbmodels.Quiz, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuizDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quizDo) Debug() IQuizDo {
	return q.withDO(q.DO.Debug())
}

func (q quizDo) WithContext(ctx context.Context) IQuizDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizDo) ReadDB() IQuizDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizDo) WriteDB() IQuizDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizDo) Session(config *gorm.Session) IQuizDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizDo) Clauses(conds ...clause.Expression) IQuizDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizDo) Returning(value interface{}, columns ...string) IQuizDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizDo) Not(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizDo) Or(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizDo) Select(conds ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizDo) Where(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizDo) Order(conds ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizDo) Distinct(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizDo) Omit(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizDo) Join(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizDo) Group(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizDo) Having(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizDo) Limit(limit int) IQuizDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizDo) Offset(offset int) IQuizDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuizDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizDo) Unscoped() IQuizDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizDo) Create(values ...*dbmodels.Quiz) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizDo) CreateInBatches(values []*dbmodels.Quiz, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizDo) Save(values ...*dbmodels.Quiz) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizDo) First() (*dbmodels.Quiz, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Quiz), nil
	}
}

func (q quizDo) Take() (*dbmodels.Quiz, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Quiz), nil
	}
}

func (q quizDo) Last() (*dbmodels.Quiz, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Quiz), nil
	}
}

func (q quizDo) Find() ([]*dbmodels.Quiz, error) {
	result, err := q.DO.Find()
	return result.([]*dbmodels.Quiz), err
}

func (q quizDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Quiz, err error) {
	buf := make([]*dbmodels.Quiz, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizDo) FindInBatches(result *[]*dbmodels.Quiz, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizDo) Attrs(attrs ...field.AssignExpr) IQuizDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizDo) Assign(attrs ...field.AssignExpr) IQuizDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizDo) Joins(fields ...field.RelationField) IQuizDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizDo) Preload(fields ...field.RelationField) IQuizDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizDo) FirstOrInit() (*dbmodels.Quiz, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Quiz), nil
	}
}

func (q quizDo) FirstOrCreate() (*dbmodels.Quiz, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Quiz), nil
	}
}

func (q quizDo) FindByPage(offset int, limit int) (result []*dbmodels.Quiz, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizDo) Delete(models ...*dbmodels.Quiz) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizDo) withDO(do gen.Dao) *quizDo {
	q.DO = *do.(*gen.DO)
	return q
}
